buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'jacoco'

jar {
    baseName = 'ekanban-backend'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

//1. exclude commons-logging
configurations.all {
    exclude group: 'commons-logging', module: 'commons-logging'
}

project.ext {
    cucumberVersion = '1.2.4'
    junitVersion = '4.12'
    contextRunnerVersion = '4.12.1'
    restAVersion = '3.0.1'
    slf4jVersion = '1.7.21'
    logbackVersion = '1.1.7'
    hamcrestVersion = '1.3'
    equalsVersion = '2.1.6'
    mockitoVersion = '1.+'
    cloningVersion = '1.9.2'
    guavaVersion = '20.0'
    spectrumVersion = '1.0.0'
    jRubyVersion = '9.1.7.0'
}

configurations { rspec }

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.slf4j:jcl-over-slf4j:' + slf4jVersion
    compile 'ch.qos.logback:logback-classic:' + logbackVersion
    compile 'uk.com.robust-it:cloning:' + cloningVersion
    compile 'com.google.guava:guava:' + guavaVersion

    //java
    testCompile 'junit:junit:' + junitVersion
    testCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:' + contextRunnerVersion
    testCompile 'org.hamcrest:hamcrest-all:' + hamcrestVersion
    testCompile 'nl.jqno.equalsverifier:equalsverifier:' + equalsVersion
    testCompile 'org.mockito:mockito-core:' + mockitoVersion
    testCompile 'com.greghaskins:spectrum:' + spectrumVersion
    testCompile 'io.rest-assured:rest-assured:' + restAVersion
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    //ruby (rspec)
    rspec 'org.jruby:jruby-complete:' + jRubyVersion
    //groovy (spock)
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.6' //Rest-client
    testCompile 'org.codehaus.groovy:groovy-all:2.4.4'
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-3'
    testCompile 'cglib:cglib-nodep:3.2.4' // stubbing classes
    testCompile ('com.athaydes:spock-reports:1.2.13') {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    //InjectMocks type mocking (not recommended)
    testCompile 'com.blogspot.toomuchcoding:spock-subjects-collaborators-extension:1.2.1'
    integrationTestCompile 'org.spockframework:spock-spring:1.1-groovy-2.4-rc-3'

    //java (cucumber)
    acceptanceTestCompile 'info.cukes:cucumber-java:' + cucumberVersion
    acceptanceTestCompile 'info.cukes:cucumber-junit:' + cucumberVersion
    acceptanceTestCompile 'info.cukes:cucumber-spring:' + cucumberVersion
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/groovy')
        }
        resources.srcDir file('src/integration-test/resources')
    }
    acceptanceTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/acceptance-test/java')
        }
        resources.srcDir file('src/acceptance-test/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    include '**/*Spec.*'
    outputs.upToDateWhen { false }
}

task acceptanceTest(type: Test) {
    testClassesDir = sourceSets.acceptanceTest.output.classesDir
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

task(bundler, type: JavaExec) {
    main = 'org.jruby.Main'
    classpath = configurations.rspec
    args = ['-S', 'gem', 'install', 'bundler']
    environment['GEM_PATH'] = file('build/gems').path
    environment['GEM_HOME'] = file('build/gems').path
}

task(gems, dependsOn: ["bundler"], type: JavaExec) {
    main = 'org.jruby.Main'
    classpath = configurations.rspec
    args = ['-S', 'bundle', 'install']
    environment['GEM_PATH'] = file('build/gems').path
    environment['GEM_HOME'] = file('build/gems').path
}

task(spec, dependsOn: ["classes"], type: JavaExec) {
    main = 'org.jruby.Main'
    classpath = sourceSets.test.runtimeClasspath + configurations.rspec
    if ( project.hasProperty("file") ) {
        args = ['-S', 'build/gems/bin/rspec', 'src/spec/unit/'+file]
    } else {
        args = ['-S', 'build/gems/bin/rspec', 'src/spec/unit']
    }
    environment['GEM_HOME'] = file('build/gems').path
    environment['GEM_PATH'] = file('build/gems').path
    environment['ENV'] = "test"
}

task(integrationSpec, dependsOn: ["classes"], type: JavaExec) {
    main = 'org.jruby.Main'
    classpath = sourceSets.test.runtimeClasspath + configurations.rspec
    if ( project.hasProperty("file") ) {
        args = ['-S', 'build/gems/bin/rspec', 'src/spec/api/'+file]
    } else {
        args = ['-S', 'build/gems/bin/rspec', 'src/spec/api']
    }
    environment['GEM_HOME'] = file('build/gems').path
    environment['GEM_PATH'] = file('build/gems').path
    environment['ENV'] = "integration-test"
}

//check.dependsOn spec
//spec.mustRunAfter test

//check.dependsOn integrationSpec
//integrationSpec.mustRunAfter spec
